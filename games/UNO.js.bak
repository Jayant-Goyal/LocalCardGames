export default {
    name: 'UNO',
    description: 'The classic card game. Be the first to play all of your cards!',
    minPlayers: 2,
    maxPlayers: 10,
    initialHandSize: 7,
    deck: function() {
        const deck = [];
        const COLORS = ['red', 'green', 'blue', 'yellow'];

        // Helper to generate a placeholder image path.
        // Replace 'images/uno/' with the actual path to your card images.
        // A unique identifier is added to the card object to help differentiate duplicate cards.
        const getImagePath = (color, value) => `images/uno/${color}_${value.toLowerCase().replace(' ', '')}.png`;
        let cardIdCounter = 0;

        for (const color of COLORS) {
            deck.push({ id: cardIdCounter++, color, value: '0', image: getImagePath(color, '0') });
            for (let i = 1; i <= 9; i++) {
                const valStr = i.toString();
                deck.push({ id: cardIdCounter++, color, value: valStr, image: getImagePath(color, valStr) });
                deck.push({ id: cardIdCounter++, color, value: valStr, image: getImagePath(color, valStr) });
            }
            ['skip', 'reverse', 'draw2'].forEach(action => {
                deck.push({ id: cardIdCounter++, color, value: action, image: getImagePath(color, action) });
                deck.push({ id: cardIdCounter++, color, value: action, image: getImagePath(color, action) });
            });
        }

        for (let i = 0; i < 4; i++) {
            deck.push({ id: cardIdCounter++, color: 'wild', value: 'wild', image: getImagePath('wild', 'wild') });
            deck.push({ id: cardIdCounter++, color: 'wild', value: 'wild4', image: getImagePath('wild', 'wild4') });
        }

        return deck;
    },
    getDisplayInfo: function(card) {
        // This function generates the HTML for a card, using an image.
        // It includes a fallback in case the image fails to load.
        const colorMap = { red: '#EF4444', green: '#22C55E', blue: '#3B82F6', yellow: '#EAB308', wild: '#374151'};
        const symbolMap = { skip: 'ðŸš«', reverse: 'ðŸ”„', draw2: '+2', wild: 'ðŸŽ¨', wild4: '+4' };
        const fallbackColor = colorMap[card.color] || '#6B7280';
        const fallbackSymbol = symbolMap[card.value] || card.value;

        return {
            backgroundColor: 'bg-gray-800', // Initial fallback color
            content: `<img src="${card.image}" alt="${card.color} ${card.value}" class="w-full h-full object-contain rounded-lg" onerror="this.style.display='none'; this.parentElement.style.backgroundColor='${fallbackColor}'; this.parentElement.innerHTML='<span class=\\'text-white\\'>${fallbackSymbol}</span>';">`
        };
    },
    rules: {
        isPlayable: function(card, topCard, activeValue) { // activeValue is the current color
            if (card.color === 'wild') return true;
            if (card.color === activeValue) return true;
            if (card.value === topCard.value) return true;
            return false;
        },
        getWildCardChoices: function() {
            return { title: "Choose a color", choices: [
                { value: 'red', display: '<div class="w-full h-full bg-red-500 rounded-full"></div>' },
                { value: 'green', display: '<div class="w-full h-full bg-green-500 rounded-full"></div>' },
                { value: 'blue', display: '<div class="w-full h-full bg-blue-500 rounded-full"></div>' },
                { value: 'yellow', display: '<div class="w-full h-full bg-yellow-500 rounded-full"></div>' }
            ]};
        },
        onPlay: function(card, chosenValue, playerName) {
            // This function returns an "effects" object that the main game engine will execute.
            const effects = {
                drawCards: 0,
                skipNextPlayer: false,
                reverseTurn: false,
                setNextColor: null,
                logMessage: `${playerName} played a ${card.color} ${card.value}.`
            };

            switch (card.value) {
                case 'skip':
                    effects.skipNextPlayer = true;
                    effects.logMessage = `${playerName} skipped the next player!`;
                    break;
                case 'reverse':
                    effects.reverseTurn = true;
                    effects.logMessage = `${playerName} reversed the turn order!`;
                    break;
                case 'draw2':
                    effects.drawCards = 2;
                    effects.skipNextPlayer = true; // In UNO, after drawing, the next player is skipped.
                    effects.logMessage = `${playerName} made the next player draw 2 cards!`;
                    break;
                case 'wild':
                    effects.setNextColor = chosenValue;
                    effects.logMessage = `${playerName} played a wild card and chose ${chosenValue}.`;
                    break;
                case 'wild4':
                    effects.drawCards = 4;
                    effects.skipNextPlayer = true;
                    effects.setNextColor = chosenValue;
                    effects.logMessage = `${playerName} made the next player draw 4 and chose ${chosenValue}!`;
                    break;
            }
            return effects;
        }
    }
};

